{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2385,"status":"ok","timestamp":1663661712955,"user":{"displayName":"아이덴티파이ai","userId":"09195867153538576050"},"user_tz":-540},"id":"XltI_t_kUGvD","outputId":"2b828ce4-f037-428b-8726-81d9c4a548e9"},"outputs":[{"name":"stdout","output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n","/content/drive/.shortcut-targets-by-id/1j1N0u5t0l99N_wfSd5UZvnhugzn5g_NC/TimeSeriesAnomaly/data/modify\n"]}],"source":["from google.colab import drive\n","# drive.mount('/content/drive/MyDrive/IITP/sohyun/creditcard_prediction/data')\n","drive.mount('/content/drive')\n","\n","%cd drive/MyDrive/IITP/sohyun/TimeSeriesAnomaly/data/modify"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qi5fjXQLHQab"},"outputs":[],"source":["# !pip install wandb -qqq\n","# import wandb\n","# wandb.login()"]},{"cell_type":"code","execution_count":2,"metadata":{"executionInfo":{"elapsed":2232,"status":"ok","timestamp":1663661718681,"user":{"displayName":"아이덴티파이ai","userId":"09195867153538576050"},"user_tz":-540},"id":"gq_QRBw-_yqo"},"outputs":[],"source":["import matplotlib.pyplot as plt\n","import easydict\n","from sklearn.preprocessing import StandardScaler, MinMaxScaler\n","import random\n","import pandas as pd\n","import numpy as np\n","import os\n","import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","import torch.nn.functional as F\n","from torch.utils.data import Dataset, DataLoader\n","from tqdm.auto import tqdm\n","from sklearn.metrics import f1_score\n","import time\n","import math"]},{"cell_type":"markdown","metadata":{"id":"zjoJxI3iylhf"},"source":["## Data "]},{"cell_type":"code","execution_count":3,"metadata":{"executionInfo":{"elapsed":307,"status":"ok","timestamp":1663661722375,"user":{"displayName":"아이덴티파이ai","userId":"09195867153538576050"},"user_tz":-540},"id":"yH_ixp0aWdm4"},"outputs":[],"source":["#---# LOAD npy file #---#\n","Fu_20_normal = np.load('Fu_20_normal.npy')\n","Fu_21_normal = np.load('Fu_21_normal.npy')\n","Fu_21_abnormal = np.load('Fu_21_abnormal.npy')\n","Fu_22_normal = np.load('Fu_22_normal.npy')\n","Fu_22_abnormal = np.load('Fu_22_abnormal.npy')\n","\n","Fu_20_normal_10 = np.load('Fu_20_normal_10.npy')\n","Fu_21_normal_10 = np.load('Fu_21_normal_10.npy')\n","Fu_21_abnormal_10 = np.load('Fu_21_abnormal_10.npy')\n","Fu_22_normal_10 = np.load('Fu_22_normal_10.npy')\n","Fu_22_abnormal_10 = np.load('Fu_22_abnormal_10.npy')\n","\n","# import sys\n","# np.set_printoptions(threshold=sys.maxsize) # print all\n","\n","#---# 확인용 #---#\n","# plt.figure(figsize=(30,5))\n","# plt.plot(Fu_22_abnormal_10)"]},{"cell_type":"code","execution_count":4,"metadata":{"executionInfo":{"elapsed":268,"status":"ok","timestamp":1663661724494,"user":{"displayName":"아이덴티파이ai","userId":"09195867153538576050"},"user_tz":-540},"id":"fS479XwTHmk0"},"outputs":[],"source":["device = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')\n","\n","class MyDataset(Dataset):\n","  def __init__(self, data):\n","    self.data = np.array(self.sliding_window(data, config.window_size, config.stride))\n","    self.data = self.data.reshape(-1, config.window_size)\n","    \n","  def __getitem__(self, index):\n","    self.x = self.data[index]\n","    return (index, torch.Tensor(self.x))\n","      \n","  def __len__(self):\n","    return len(self.data)\n","\n","  #---# Window #---#\n","  def sliding_window(self, arr, window_size, stride):\n","    start_pt = 0\n","    total_data = []\n","    while(True) :\n","      if len(arr) \u003c (start_pt + window_size) : break\n","      data = arr[start_pt:start_pt+window_size]\n","      start_pt += stride\n","      total_data.append(data)\n","    return total_data\n","\n","\n","def sliding_window(arr, window_size, stride): ######### 중복\n","    start_pt = 0\n","    total_data = []\n","    while(True) :\n","      if len(arr) \u003c (start_pt + window_size) : break\n","      data = arr[start_pt:start_pt+window_size]\n","      start_pt += stride\n","      total_data.append(data)\n","    return total_data\n","\n","def seed_everything(seed: int = 42):\n","    random.seed(seed)\n","    np.random.seed(seed)\n","    os.environ[\"PYTHONHASHSEED\"] = str(seed)\n","    torch.manual_seed(seed)\n","    torch.cuda.manual_seed(seed)  # type: ignore\n","    torch.backends.cudnn.deterministic = True  # type: ignore\n","    torch.backends.cudnn.benchmark = True  # type: ignore\n","\n","\n","def get_anomaly_time(original, prediction) : \n","  temp = np.zeros(shape=(len(original),), dtype=np.float32)\n","  original = original.squeeze(axis = 1)\n","\n","  for i in range(len(prediction)) :\n","    if prediction[i] == 0 :\n","      temp[i*config.stride : (i*config.stride + config.window_size)] = np.nan\n","\n","    elif prediction[i] == 1 : # anomaly\n","      temp[i*config.stride : (i*config.stride + config.window_size)] = original[i*config.stride : (i*config.stride + config.window_size)]\n","\n","  return temp\n","\n","\n","def drawing(pred, x) :\n","  #---# Drawing - 22 #---#\n","  plt.figure(figsize=(30,5))\n","  plt.plot(x, markersize=1)\n","  plt.plot(pred, marker='.', markersize=2, color='r', linestyle='None')\n","\n","  '''\n","  for i in range(len(pred)):\n","    if pred[i] == 1:\n","      # plt.vlines(i * config.window_size, -1, 4, colors=\"y\")\n","      # plt.vlines((i+1) * config.window_size, -1, 4, colors=\"y\")\n","      before = i * config.window_size\n","      after = (i+1) * config.window_size\n","\n","      r = np.linspace(before, after)\n","      plt.fill_between(r, -1, 4, color = \"yellow\", alpha = 0.5)\n","  '''\n","\n","  #---# 실제 anomaly 값 구간 #---#\n","  a = np.linspace(62200, 65300)\n","  # plt.fill_between(a, 0, 2000, color='green', alpha=0.3)\n","  plt.fill_between(a, -1, 4, color='green', alpha=0.5)\n","  b = np.linspace(95600, 99300)\n","  # plt.fill_between(b, 0, 2000, color='green', alpha=0.5)\n","  plt.fill_between(b, -1, 4, color='green', alpha=0.5)\n","  c = np.linspace(148400, 152300)\n","  # plt.fill_between(c, 0, 2000, color='green', alpha=0.5)\n","  plt.fill_between(c, -1, 4, color='green', alpha=0.5)\n","\n","  plt.show()\n","  plt.clf()\n","\n","def calculate(true_list, pred_list) : \n","  pred_list = pred_list.dropna()\n","\n","  pred_anomaly_set = set(pred_list.index.tolist())\n","  pred_normal_set = set(range(len(true_list))) - pred_anomaly_set\n","  true_anomaly_set = set(np.where(np.array(true_list) != 0)[0].tolist())\n","  true_normal_set = set(np.where(np.array(true_list) == 0)[0].tolist())\n","\n","  recall = len(pred_anomaly_set.intersection(true_anomaly_set)) / len(true_anomaly_set)\n","  # accuracy = len(anomaly_set.intersection(true_set)) / len(anomaly_set.union(true_set))\n","  accuracy = (len(pred_anomaly_set.intersection(true_anomaly_set)) + len(pred_normal_set.intersection(true_normal_set))) / len(true_list) # (빨간 거 맞은거 + 파란거 맞은거) / 전체\n","  return recall, accuracy"]},{"cell_type":"code","execution_count":5,"metadata":{"executionInfo":{"elapsed":765,"status":"ok","timestamp":1663661727324,"user":{"displayName":"아이덴티파이ai","userId":"09195867153538576050"},"user_tz":-540},"id":"MCqpW85kT5n8"},"outputs":[],"source":["config = easydict.EasyDict({\n","    \"num_epochs\" : 2, #500\n","    \"batch_size\" : 16, #16 \n","    \"mode\" : 'train',\n","    # \"mode\" : \"test\",\n","    \"lr\" : 1e-3, \n","    \"wd\" : None,\n","    \"window_size\" : 1000,\n","    \"stride\" : 250,\n","    \"threshold\" : 0.3, # 0.3이나 0.2로 하기\n","    \"seed\" : 1004\n","})\n","seed_everything(config.seed)\n","tm = time.localtime(time.time())\n","string = time.strftime('%Y%m%d_%H%M%S', tm)\n","\n","# wandb.init(project=\"Anomaly-Oil\", entity=\"sohyun\", name=string, magic=True)\n","\n","train = pd.DataFrame(Fu_22_normal_10, columns=['Fu'])\n","train = pd.concat([train, pd.DataFrame(Fu_21_normal_10, columns=['Fu']), pd.DataFrame(Fu_20_normal_10, columns=['Fu'])], axis=0)\n","test = pd.DataFrame(Fu_22_abnormal_10, columns=['Fu'])\n","test_len = len(test)\n","total = pd.DataFrame(pd.concat([train, test], axis=0))\n","\n","# train_scale = train['Fu'].values\n","# test_scale = test['Fu'].values\n","# total_scale = total['Fu'].values\n","\n","#---# Noramlize #---#\n","scaler = StandardScaler()\n","total_scale = scaler.fit_transform(total); total_scale = pd.DataFrame(total_scale, columns=['Fu'])['Fu'].values.tolist() # total 먼저 해놓고 transform\n","train_scale = scaler.transform(train); train_scale = pd.DataFrame(train_scale, columns=['Fu'])['Fu'].values.tolist()\n","test_scale = scaler.transform(test); test_scale = pd.DataFrame(test_scale, columns=['Fu'])['Fu'].values.tolist()\n","\n","# scaler = MinMaxScaler()\n","# total_scale = scaler.fit_transform(total); total_scale = pd.DataFrame(total_scale, columns=['Fu'])['Fu'].values.tolist()\n","# test_scale = scaler.transform(test); test_scale = pd.DataFrame(test_scale, columns=['Fu'])['Fu'].values.tolist()\n","\n","#---# Setting train data #---# 나머지 끊어주어야 함\n","train_dataset1 = MyDataset(data=train_scale[:len(Fu_22_normal_10)])\n","train_dataset2 = MyDataset(data=train_scale[len(Fu_22_normal_10):(len(Fu_22_normal_10)+len(Fu_21_normal_10))])\n","train_dataset3 = MyDataset(data=train_scale[(len(Fu_22_normal_10)+len(Fu_21_normal_10)):])\n","train_dataset = np.concatenate([train_dataset1.data, train_dataset2.data, train_dataset3.data], axis = 0)\n","\n","train_loader = DataLoader(train_dataset, batch_size=config.batch_size, shuffle=True, drop_last=True)\n","test_dataset = MyDataset(data=test_scale)\n","test_loader = DataLoader(test_dataset, batch_size=config.batch_size, shuffle=False)\n","\n","\n","# optimizer = torch.optim.Adam(params = model.parameters(), lr = config.lr) # lr = config.lr\n","# scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer, mode='max', factor=0.5, patience=10, threshold_mode='abs', min_lr=1e-8, verbose=True)\n","\n","##########################\n","#---# true list 만들기 #---#\n","##########################\n","true_label = [0 for i in range(len(test_scale))] # test_scale\n","true_label[62200:65300] = [1 for i in range(62200,65300)]\n","true_label[95600:99300] = [1 for i in range(95600,99300)]\n","true_label[148400:152300] = [1 for i in range(148400,152300)]\n","\n","true_label_sliding = sliding_window(np.array(true_label), config.window_size, config.stride)\n","true_label_sliding = np.expand_dims(np.array(true_label_sliding), 2) # dimension expansion"]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":72747,"status":"ok","timestamp":1663661698392,"user":{"displayName":"아이덴티파이ai","userId":"09195867153538576050"},"user_tz":-540},"id":"qI9EZHR4z-Fg","outputId":"be57355f-3e89-4995-9e41-5337e40ccf9c"},"outputs":[{"name":"stdout","output_type":"stream","text":["\u001b[K     |████████████████████████████████| 106 kB 36.6 MB/s \n","\u001b[K     |████████████████████████████████| 377 kB 65.5 MB/s \n","\u001b[K     |████████████████████████████████| 10.1 MB 91.4 MB/s \n","\u001b[K     |████████████████████████████████| 180 kB 68.5 MB/s \n","\u001b[K     |████████████████████████████████| 3.1 MB 60.2 MB/s \n","\u001b[K     |████████████████████████████████| 2.5 MB 55.2 MB/s \n","\u001b[K     |████████████████████████████████| 17.3 MB 43.6 MB/s \n","\u001b[K     |████████████████████████████████| 2.9 MB 55.4 MB/s \n","\u001b[K     |████████████████████████████████| 5.4 MB 55.6 MB/s \n","\u001b[K     |████████████████████████████████| 149 kB 73.4 MB/s \n","\u001b[K     |████████████████████████████████| 85 kB 5.3 MB/s \n","\u001b[K     |████████████████████████████████| 50 kB 8.6 MB/s \n","\u001b[K     |████████████████████████████████| 547 kB 74.4 MB/s \n","\u001b[K     |████████████████████████████████| 240 kB 77.4 MB/s \n","\u001b[K     |████████████████████████████████| 25.4 MB 1.3 MB/s \n","\u001b[K     |████████████████████████████████| 981 kB 75.5 MB/s \n","\u001b[K     |████████████████████████████████| 310 kB 72.5 MB/s \n","\u001b[K     |████████████████████████████████| 110.5 MB 1.7 kB/s \n","\u001b[K     |████████████████████████████████| 41 kB 708 kB/s \n","\u001b[K     |████████████████████████████████| 178 kB 72.6 MB/s \n","\u001b[K     |████████████████████████████████| 24.6 MB 1.2 MB/s \n","\u001b[K     |████████████████████████████████| 9.1 MB 50.4 MB/s \n","\u001b[K     |████████████████████████████████| 127 kB 79.9 MB/s \n","\u001b[K     |████████████████████████████████| 6.1 MB 58.1 MB/s \n","\u001b[K     |████████████████████████████████| 4.4 MB 54.1 MB/s \n","\u001b[K     |████████████████████████████████| 503 kB 67.2 MB/s \n","\u001b[K     |████████████████████████████████| 3.8 MB 53.0 MB/s \n","\u001b[?25h  Building wheel for iso639 (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Building wheel for langdetect (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Building wheel for lightfm (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Building wheel for python-louvain (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Building wheel for gast (setup.py) ... \u001b[?25l\u001b[?25hdone\n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","yellowbrick 1.5 requires scikit-learn\u003e=1.0.0, but you have scikit-learn 0.20.4 which is incompatible.\n","xarray 0.20.2 requires numpy\u003e=1.18, but you have numpy 1.16.6 which is incompatible.\n","xarray 0.20.2 requires pandas\u003e=1.1, but you have pandas 0.24.2 which is incompatible.\n","xarray-einstats 0.2.2 requires numpy\u003e=1.21, but you have numpy 1.16.6 which is incompatible.\n","tensorflow-probability 0.16.0 requires gast\u003e=0.3.2, but you have gast 0.2.2 which is incompatible.\n","tables 3.7.0 requires numpy\u003e=1.19.0, but you have numpy 1.16.6 which is incompatible.\n","resampy 0.4.0 requires numba\u003e=0.53, but you have numba 0.51.2 which is incompatible.\n","resampy 0.4.0 requires numpy\u003e=1.17, but you have numpy 1.16.6 which is incompatible.\n","pyerfa 2.0.0.1 requires numpy\u003e=1.17, but you have numpy 1.16.6 which is incompatible.\n","prophet 1.1 requires pandas\u003e=1.0.4, but you have pandas 0.24.2 which is incompatible.\n","plotnine 0.8.0 requires numpy\u003e=1.19.0, but you have numpy 1.16.6 which is incompatible.\n","plotnine 0.8.0 requires pandas\u003e=1.1.0, but you have pandas 0.24.2 which is incompatible.\n","mizani 0.7.3 requires pandas\u003e=1.1.0, but you have pandas 0.24.2 which is incompatible.\n","kapre 0.3.7 requires numpy\u003e=1.18.5, but you have numpy 1.16.6 which is incompatible.\n","kapre 0.3.7 requires tensorflow\u003e=2.0.0, but you have tensorflow 1.15.5 which is incompatible.\n","jaxlib 0.3.15+cuda11.cudnn805 requires numpy\u003e=1.19, but you have numpy 1.16.6 which is incompatible.\n","jax 0.3.17 requires numpy\u003e=1.20, but you have numpy 1.16.6 which is incompatible.\n","imbalanced-learn 0.8.1 requires scikit-learn\u003e=0.24, but you have scikit-learn 0.20.4 which is incompatible.\n","gym 0.25.2 requires numpy\u003e=1.18.0, but you have numpy 1.16.6 which is incompatible.\n","google-colab 1.0.0 requires pandas\u003e=1.1.0, but you have pandas 0.24.2 which is incompatible.\n","cmdstanpy 1.0.7 requires numpy\u003e=1.21, but you have numpy 1.16.6 which is incompatible.\n","astropy 4.3.1 requires numpy\u003e=1.17, but you have numpy 1.16.6 which is incompatible.\n","albumentations 1.2.1 requires scikit-image\u003e=0.16.1, but you have scikit-image 0.14.5 which is incompatible.\n","aesara 2.7.9 requires numpy\u003e=1.17.0, but you have numpy 1.16.6 which is incompatible.\n","aeppl 0.0.33 requires numpy\u003e=1.18.1, but you have numpy 1.16.6 which is incompatible.\u001b[0m\n"]}],"source":["!pip install orion-ml -qqq"]},{"cell_type":"code","execution_count":6,"metadata":{"executionInfo":{"elapsed":4121,"status":"ok","timestamp":1663661736524,"user":{"displayName":"아이덴티파이ai","userId":"09195867153538576050"},"user_tz":-540},"id":"FuQfVheeyH97"},"outputs":[],"source":["from pandas.tseries.offsets import Second\n","from datetime import date, timedelta\n","from orion import Orion\n","from datetime import datetime\n","from mlprimitives import load_primitive\n","\n","def make_timestamp(date, data_len) :\n","  # start_date = datetime.strptime('201802210000', '%Y%m%d%H%M')\n","  start_date = datetime.strptime(date, '%Y%m%d%H%M')\n","  timestamp = time.mktime(start_date.timetuple())\n","  dates = []; dates.append(timestamp)\n","\n","  for i in range(data_len-1) :\n","    new_start_date = start_date + timedelta(minutes=10)\n","    timestamp = time.mktime(new_start_date.timetuple())\n","    dates.append(timestamp)\n","    start_date = new_start_date\n","  \n","  return dates\n","\n","dates = make_timestamp('201802210000', len(train_scale))\n","traindata = pd.DataFrame({\"timestamp\":dates, \"value\":train_scale})\n","dates_test = make_timestamp('201802211200', len(test_scale))\n","testdata = pd.DataFrame({\"timestamp\":dates_test, \"value\":test_scale})\n"]},{"cell_type":"code","execution_count":16,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":419,"status":"ok","timestamp":1663663988248,"user":{"displayName":"아이덴티파이ai","userId":"09195867153538576050"},"user_tz":-540},"id":"YuDi4X_IyH4E","outputId":"2cff3c24-9708-49aa-c466-f7d2c0def4f5"},"outputs":[{"name":"stdout","output_type":"stream","text":["X shape = (2447, 1000, 1), y shape = (2447, 0), index shape = (2447, 1), target_index shape = (2447, 1)\n"]}],"source":["###################################\n","#---# Rolling window sequence #---#\n","###################################\n","'''\n","window_size \n","target_size\n","step_size\n","target_column\n","drop_windows\n","'''\n","primitive = load_primitive('mlprimitives.custom.timeseries_preprocessing.rolling_window_sequences', \n","                           arguments={'window_size':1000, 'target_size':0, 'step_size':250, 'target_column':0, 'drop_windows':False})\n","traindata = np.array(train_scale).reshape(-1, 1)\n","index = np.array(range(len(train_scale))).reshape(-1, 1)\n","X, y, index, target_index = primitive.produce(X=traindata, index=index)\n","\n","testdata = np.array(test_scale).reshape(-1, 1)\n","index_test = np.array(range(len(test_scale))).reshape(-1, 1)\n","X_test, y_test, index_test, target_index_test = primitive.produce(X=testdata, index=index_test)\n","\n","print(f\"X shape = {X.shape}, y shape = {y.shape}, index shape = {index.shape}, target_index shape = {target_index.shape}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"hNPCXH550HNG"},"outputs":[{"name":"stdout","output_type":"stream","text":["============== AER ==============\n","(2447, 1000, 1)\n","Train on 1957 samples, validate on 490 samples\n","Epoch 1/1500\n","1957/1957 [==============================] - 171s 87ms/sample - loss: nan - tf_op_layer_strided_slice_loss: nan - tf_op_layer_strided_slice_1_loss: nan - tf_op_layer_strided_slice_2_loss: nan - val_loss: nan - val_tf_op_layer_strided_slice_loss: nan - val_tf_op_layer_strided_slice_1_loss: nan - val_tf_op_layer_strided_slice_2_loss: nan\n","Epoch 2/1500\n","1957/1957 [==============================] - 164s 84ms/sample - loss: nan - tf_op_layer_strided_slice_loss: nan - tf_op_layer_strided_slice_1_loss: nan - tf_op_layer_strided_slice_2_loss: nan - val_loss: nan - val_tf_op_layer_strided_slice_loss: nan - val_tf_op_layer_strided_slice_1_loss: nan - val_tf_op_layer_strided_slice_2_loss: nan\n","Epoch 3/1500\n","1957/1957 [==============================] - 163s 83ms/sample - loss: nan - tf_op_layer_strided_slice_loss: nan - tf_op_layer_strided_slice_1_loss: nan - tf_op_layer_strided_slice_2_loss: nan - val_loss: nan - val_tf_op_layer_strided_slice_loss: nan - val_tf_op_layer_strided_slice_1_loss: nan - val_tf_op_layer_strided_slice_2_loss: nan\n","Epoch 4/1500\n","1957/1957 [==============================] - 162s 83ms/sample - loss: nan - tf_op_layer_strided_slice_loss: nan - tf_op_layer_strided_slice_1_loss: nan - tf_op_layer_strided_slice_2_loss: nan - val_loss: nan - val_tf_op_layer_strided_slice_loss: nan - val_tf_op_layer_strided_slice_1_loss: nan - val_tf_op_layer_strided_slice_2_loss: nan\n","Epoch 5/1500\n","1957/1957 [==============================] - 165s 84ms/sample - loss: nan - tf_op_layer_strided_slice_loss: nan - tf_op_layer_strided_slice_1_loss: nan - tf_op_layer_strided_slice_2_loss: nan - val_loss: nan - val_tf_op_layer_strided_slice_loss: nan - val_tf_op_layer_strided_slice_1_loss: nan - val_tf_op_layer_strided_slice_2_loss: nan\n","Epoch 6/1500\n","1957/1957 [==============================] - 160s 82ms/sample - loss: nan - tf_op_layer_strided_slice_loss: nan - tf_op_layer_strided_slice_1_loss: nan - tf_op_layer_strided_slice_2_loss: nan - val_loss: nan - val_tf_op_layer_strided_slice_loss: nan - val_tf_op_layer_strided_slice_1_loss: nan - val_tf_op_layer_strided_slice_2_loss: nan\n","Epoch 7/1500\n","1957/1957 [==============================] - 162s 83ms/sample - loss: nan - tf_op_layer_strided_slice_loss: nan - tf_op_layer_strided_slice_1_loss: nan - tf_op_layer_strided_slice_2_loss: nan - val_loss: nan - val_tf_op_layer_strided_slice_loss: nan - val_tf_op_layer_strided_slice_1_loss: nan - val_tf_op_layer_strided_slice_2_loss: nan\n","Epoch 8/1500\n","1957/1957 [==============================] - 162s 83ms/sample - loss: nan - tf_op_layer_strided_slice_loss: nan - tf_op_layer_strided_slice_1_loss: nan - tf_op_layer_strided_slice_2_loss: nan - val_loss: nan - val_tf_op_layer_strided_slice_loss: nan - val_tf_op_layer_strided_slice_1_loss: nan - val_tf_op_layer_strided_slice_2_loss: nan\n","Epoch 9/1500\n","1957/1957 [==============================] - 162s 83ms/sample - loss: nan - tf_op_layer_strided_slice_loss: nan - tf_op_layer_strided_slice_1_loss: nan - tf_op_layer_strided_slice_2_loss: nan - val_loss: nan - val_tf_op_layer_strided_slice_loss: nan - val_tf_op_layer_strided_slice_1_loss: nan - val_tf_op_layer_strided_slice_2_loss: nan\n","Epoch 10/1500\n","1957/1957 [==============================] - 162s 83ms/sample - loss: nan - tf_op_layer_strided_slice_loss: nan - tf_op_layer_strided_slice_1_loss: nan - tf_op_layer_strided_slice_2_loss: nan - val_loss: nan - val_tf_op_layer_strided_slice_loss: nan - val_tf_op_layer_strided_slice_1_loss: nan - val_tf_op_layer_strided_slice_2_loss: nan\n","Reverse Prediction: [[nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]]\n","Reconstructed Values: [[[nan]\n","  [nan]\n","  [nan]\n","  ...\n","  [nan]\n","  [nan]\n","  [nan]]\n","\n"," [[nan]\n","  [nan]\n","  [nan]\n","  ...\n","  [nan]\n","  [nan]\n","  [nan]]\n","\n"," [[nan]\n","  [nan]\n","  [nan]\n","  ...\n","  [nan]\n","  [nan]\n","  [nan]]\n","\n"," ...\n","\n"," [[nan]\n","  [nan]\n","  [nan]\n","  ...\n","  [nan]\n","  [nan]\n","  [nan]]\n","\n"," [[nan]\n","  [nan]\n","  [nan]\n","  ...\n","  [nan]\n","  [nan]\n","  [nan]]\n","\n"," [[nan]\n","  [nan]\n","  [nan]\n","  ...\n","  [nan]\n","  [nan]\n","  [nan]]], Forward Prediction: [[nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]\n"," [nan]]\n"]},{"ename":"TypeError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m\u003cipython-input-17-bf34bfdca563\u003e\u001b[0m in \u001b[0;36m\u003cmodule\u003e\u001b[0;34m\u001b[0m\n\u001b[1;32m    188\u001b[0m                                \u001b[0;34m\"mask\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    189\u001b[0m                                \u001b[0;34m\"rec_error_type\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\"dtw\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 190\u001b[0;31m                                \u001b[0;34m\"lambda_rec\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m0.5\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    191\u001b[0m                            })\n\u001b[1;32m    192\u001b[0m \u001b[0mindex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/mlprimitives/__init__.py\u001b[0m in \u001b[0;36mload_primitive\u001b[0;34m(primitive, arguments)\u001b[0m\n\u001b[1;32m     18\u001b[0m     \u001b[0marguments\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marguments\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---\u003e 20\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mMLBlock\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprimitive\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0marguments\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/mlblocks/mlblock.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, primitive, **kwargs)\u001b[0m\n\u001b[1;32m    176\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    177\u001b[0m         \u001b[0mhyperparameters\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmetadata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'hyperparameters'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 178\u001b[0;31m         \u001b[0minit_params\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfit_params\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mproduce_params\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_extract_params\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhyperparameters\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    179\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    180\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_hyperparameters\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minit_params\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/mlblocks/mlblock.py\u001b[0m in \u001b[0;36m_extract_params\u001b[0;34m(self, kwargs, hyperparameters)\u001b[0m\n\u001b[1;32m    124\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    125\u001b[0m             \u001b[0merror\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"Unexpected hyperparameters '{}'\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m', '\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeys\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 126\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merror\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    127\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    128\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0minit_params\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfit_params\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mproduce_params\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: Unexpected hyperparameters 'mask'"]}],"source":["#################\n","#---# ARIMA #---#\n","#################\n","'''\n","steps : number of forward steps to predict\n","p : the number of autoregressive parameters to use\n","d : the number of differences to use\n","q : the number of moving average (MA) parameters to use\n","'''\n","\n","# primitive = load_primitive('statsmodels.tsa.arima_model.Arima',\n","#                            arguments = {\"X\":np.array(train_scale), \"steps\":1})\n","# y = primitive.produce(X=np.array(test_scale)) # predicted values\n","# print(y)\n","\n","################\n","#---# LSTM #---#\n","################\n","'''\n","classification\n","epochs\n","callbacks\n","validation_split : default = 0.2\n","batch_size : default = 64\n","input_shape : \n","dense_units : number of values ahead to predict (target size). default = 1\n","optimizer : default = keras.optimizers.Adam\n","loss : default = keras.mean_squared_error\n","metrics : defualt = ['mse']\n","return_seqeunces : whether to return the last output in the output sequence or the full sequence. default = False\n","layers : list of keras layers which are the basic building blocks\n","verbose : default = False\n","lstm_1_unit : dimensionality of the output space for the first LSTM layer. default = 80\n","dropout_1_rate : float(0~1) default = 0.3\n","lstm_2_unit\n","dropout_2_rate\n","'''\n","# kk = np.array(train_scale).reshape(1,-1,1)\n","# primitive = load_primitive('keras.Sequential.LSTMTimeSeriesRegressor',\n","#                            arguments = {\"X\":kk, \"y\":y, \"batch_size\":16, \"validation_split\":0.2}) #\"input_shape\":()\n","# primitive.fit()\n","# print(primitive.produce(X=X))\n","\n","\n","###################\n","#---# LSTM AE #---#\n","###################\n","# print(\"============== LSTM AE ==============\")\n","# primitive = load_primitive('keras.Sequential.LSTMSeq2Seq',\n","#                           arguments = {'X':X, \"y\":X, \"classification\":False, \n","#                                         \"epochs\":2,\n","#                                         \"input_shape\":(1000,1),\n","#                                         \"target_shape\":(1000,1),\n","#                                         \"window_size\":1000, \"batch_size\":8, \n","#                                         \"validation_split\":0.2})\n","# primitive.fit()\n","# pred = primitive.produce(X=X_test)\n","# # pred.mean()\n","\n","# primitive = load_primitive('orion.primitives.timeseries_errors.reconstruction_errors')\n","# errors, predictions = primitive.produce(y=X_test, y_hat=pred)\n","\n","# primitive = load_primitive('orion.primitives.timeseries_anomalies.find_anomalies',\n","#                           arguments = {'anomaly_padding':1})\n","# error_range = primitive.produce(errors=errors, index=range(len(errors)))\n","# print(\"===error_range===\\n\", error_range)\n","\n","# prediction = pd.DataFrame(0, index=range(0, len(X_test)), columns={'Fu'})\n","# for i in error_range :\n","#   start = int(i[0])\n","#   end = int(i[1])\n","#   prediction[start:end] = 1\n","\n","# anomaly_value = get_anomaly_time(testdata, prediction['Fu'].values.tolist())\n","# drawing(anomaly_value, pd.DataFrame(testdata))\n","# recall, accuracy = calculate(pd.DataFrame(true_label), pd.DataFrame(anomaly_value))\n","# print(f'recall : {recall}, accuracy : {accuracy}')\n","\n","####################\n","#---# Dense AE #---#\n","####################\n","# print(\"============== Dense AE ==============\")\n","# primitive = load_primitive('keras.Sequential.DenseSeq2Seq',\n","#                            arguments = {'X':X, \"y\":X, \"classification\":False, \n","#                                         \"epochs\":1500,\n","#                                         \"input_shape\":(1000,1),\n","#                                         \"target_shape\":(1000,1),\n","#                                         \"window_size\":1000, \"batch_size\": 16, \n","#                                         \"validation_split\":0.2})\n","# primitive.fit()\n","# pred = primitive.produce(X=X_test)\n","# # pred.mean()\n","\n","# primitive = load_primitive('orion.primitives.timeseries_errors.reconstruction_errors')\n","# errors, predictions = primitive.produce(y=X_test, y_hat=pred)\n","\n","# primitive = load_primitive('orion.primitives.timeseries_anomalies.find_anomalies',\n","#                            arguments = {'anomaly_padding':1})\n","# error_range = primitive.produce(errors=errors, index=range(len(errors)))\n","# print(\"===error_range===\\n\", error_range)\n","\n","# prediction = pd.DataFrame(0, index=range(0, len(X_test)), columns={'Fu'})\n","# for i in error_range :\n","#   start = int(i[0])\n","#   end = int(i[1])\n","#   prediction[start:end] = 1\n","\n","# anomaly_value = get_anomaly_time(testdata, prediction['Fu'].values.tolist())\n","# drawing(anomaly_value, pd.DataFrame(testdata))\n","# recall, accuracy = calculate(pd.DataFrame(true_label), pd.DataFrame(anomaly_value))\n","# print(f'recall : {recall}, accuracy : {accuracy}')\n","\n","\n","##################\n","#---# TadGAN #---#\n","##################\n","# from keras.layers import Input, Lambda, Dense\n","# import tensorflow as tf\n","\n","# print(\"============== TadGAN ==============\")\n","# primitive = load_primitive('orion.primitives.tadgan.TadGAN',\n","#                            arguments = {'X':X, \"y\":X, \n","#                                         \"epochs\":15,\n","#                                         \"input_shape\":(1000,1),\n","#                                         \"target_shape\":(1000,1),\n","#                                         \"latent_dim\" : 100,\n","#                                         # \"batch_size\": 16, ########\n","#                                         \"learning_rate\" : 0.01,\n","#                                         \"dense_units\" : 100\n","#                                         })\n","# primitive.fit()\n","\n","# pred, critic = primitive.produce(X=X_test, y=true_label_sliding)\n","# print(f'average reconstructed value:{y.mean()}, critic score:{critic[0][0]}')\n","\n","# primitive = load_primitive('orion.primitives.tadgan.score_anomalies',\n","#                            arguments = {'error_smooth_window':10,\n","#                                         'critic_smooth_window':10,\n","#                                         'score_window':10,\n","#                                         'comb':'rec'})\n","# index = np.array([[1]])\n","# errors, true_index, true, predictions = primitive.produce(y=X_test, y_hat=pred, critic=critic, index=index)\n","\n","# primitive = load_primitive('orion.primitives.timeseries_anomalies.find_anomalies',\n","#                            arguments = {'anomaly_padding':1})\n","# error_range = primitive.produce(errors=errors, index=range(len(errors)))\n","# print(\"=== error_range ===\\n\", error_range)\n","\n","# prediction = pd.DataFrame(0, index=range(0, len(X_test)), columns={'Fu'})\n","# for i in error_range :\n","#   start = int(i[0])\n","#   end = int(i[1])\n","#   prediction[start:end] = 1\n","\n","# anomaly_value = get_anomaly_time(testdata, prediction['Fu'].values.tolist())\n","# drawing(anomaly_value, pd.DataFrame(testdata))\n","# recall, accuracy = calculate(pd.DataFrame(true_label), pd.DataFrame(anomaly_value))\n","# print(f'recall : {recall}, accuracy : {accuracy}')\n","\n","\n","\n","###############\n","#---# AER #---#\n","###############\n","print(\"============== AER ==============\")\n","primitive = load_primitive('orion.primitives.aer.AER',\n","                           arguments = {'X':X, \"y\":X,\n","                                        \"epochs\":1500,\n","                                        # \"input_shape\":(1000,1),\n","                                        \"batch_size\": 16, \n","                                        \"learning_rate\":0.2})\n","print(X.shape)\n","primitive.fit()\n","\n","ry, y, fy = primitive.produce(X=X_test)\n","# ry : n-dimensional array contatining the regression for each input sequence (reverse)\n","# y : n-dimensional array containing the reconstructions for each input sequence\n","# fy : n-dimensional array containing teh regression for each input sequence (forward)\n","print(f\"Reverse Prediction: {ry}\\nReconstructed Values: {y}, Forward Prediction: {fy}\")\n","\n","\n","primitive = load_primitive('orion.primitives.tadgan.score_anomalies',\n","                           arguments = {\n","                               \"error_smooth_window\":10,\n","                               \"critic_smooth_window\":10,\n","                               \"score_window\":10,\n","                               \"comb\":\"mult\",\n","                               \"mask\":True,\n","                               \"rec_error_type\":\"dtw\",\n","                               \"lambda_rec\":0.5\n","                           })\n","index = np.array([[1]])\n","errors, true_index, true, predictions = primitive.produce(y=X_test, y_hat=y, critic=fy, index=index) ### 여기 critic이 뭐지?\n","\n","primitive = load_primitive('orion.primitives.timeseries_anomalies.find_anomalies',\n","                           arguments = {'anomaly_padding':1})\n","error_range = primitive.produce(errors=errors, index=range(len(errors)))\n","print(\"===error_range===\\n\", error_range)\n","\n","prediction = pd.DataFrame(0, index=range(0, len(X_test)), columns={'Fu'})\n","for i in error_range :\n","  start = int(i[0])\n","  end = int(i[1])\n","  prediction[start:end] = 1\n","\n","anomaly_value = get_anomaly_time(testdata, prediction['Fu'].values.tolist())\n","drawing(anomaly_value, pd.DataFrame(testdata))\n","recall, accuracy = calculate(pd.DataFrame(true_label), pd.DataFrame(anomaly_value))\n","print(f'recall : {recall}, accuracy : {accuracy}')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"sPmDDw98C298"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"950wxT2ezxYf"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":159134,"status":"ok","timestamp":1663152753293,"user":{"displayName":"아이덴티파이ai","userId":"09195867153538576050"},"user_tz":-540},"id":"K7W5xXsq56mT","outputId":"40df4c3c-d51f-4ada-d892-59bffc62739b"},"outputs":[{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/numpy/core/fromnumeric.py:3118: RuntimeWarning: Mean of empty slice.\n","  out=out, **kwargs)\n","/usr/local/lib/python3.7/dist-packages/numpy/core/_methods.py:85: RuntimeWarning: invalid value encountered in double_scalars\n","  ret = ret.dtype.type(ret / rcount)\n"]},{"name":"stdout","output_type":"stream","text":["Epoch: 1/1, [Dx loss: nan] [Dz loss: nan] [G loss: nan]\n"]}],"source":["xx = np.array([1] * 100).reshape(1,-1,1)\n","yy = xx[:,:,[0]]\n","primitive2 = load_primitive('orion.primitives.tadgan.TadGAN',\n","                            arguments = {\"X\":xx, \"y\":xx, \"epochs\":1, \"batch_size\":2, \"iterations_critic\":1})\n","primitive2.fit()\n","yyy, critic = primitive2.produce(X=xx, y=yy)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"E_i61SXxCsZC","outputId":"c0d89b9e-444d-4bcc-dec0-e55a5fd42e74"},"outputs":[{"name":"stdout","output_type":"stream","text":["============== LSTM AE ==============\n","window:1100, stride:400\n","X shape = (1529, 1100, 1), y shape = (1529, 0), index shape = (1529, 1), target_index shape = (1529, 1)\n","Train on 1223 samples, validate on 306 samples\n","Epoch 1/10\n"," 288/1223 [======\u003e.......................] - ETA: 1:42 - loss: 0.8679 - mse: 0.8679"]}],"source":["#---# for loop - window / stride #---#\n","df = pd.DataFrame(columns = ['window', 'stride', 'recall', 'accuracy']); idx = 0\n","\n","window = [1100, 1200]\n","stride = [400, 500, 600]\n","\n","for w in window :\n","  for s in stride :\n","    print(f\"============== LSTM AE ==============\\nwindow:{w}, stride:{s}\")\n","    # rolling window\n","    primitive = load_primitive('mlprimitives.custom.timeseries_preprocessing.rolling_window_sequences', \n","                           arguments={'window_size':w, 'target_size':0, 'step_size':s, 'target_column':0, 'drop_windows':False})\n","    traindata = np.array(train_scale).reshape(-1, 1)\n","    index = np.array(range(len(train_scale))).reshape(-1, 1)\n","\n","    try :\n","      X, y, index, target_index = primitive.produce(X=traindata, index=index)\n","    except :\n","      continue\n","\n","    testdata = np.array(test_scale).reshape(-1, 1)\n","    index_test = np.array(range(len(test_scale))).reshape(-1, 1)\n","    X_test, y_test, index_test, target_index_test = primitive.produce(X=testdata, index=index_test)\n","\n","    print(f\"X shape = {X.shape}, y shape = {y.shape}, index shape = {index.shape}, target_index shape = {target_index.shape}\")\n","\n","    # LSTM AE\n","    primitive = load_primitive('keras.Sequential.LSTMSeq2Seq',\n","                              arguments = {'X':X, \"y\":X, \"classification\":False, \n","                                            \"epochs\":10,\n","                                            \"input_shape\":(w,1),\n","                                            \"target_shape\":(w,1),\n","                                            \"window_size\":w, \"batch_size\":8, \n","                                            \"validation_split\":0.2})\n","    primitive.fit()\n","    pred = primitive.produce(X=X_test)\n","    # pred.mean()\n","\n","    primitive = load_primitive('orion.primitives.timeseries_errors.reconstruction_errors')\n","    errors, predictions = primitive.produce(y=X_test, y_hat=pred)\n","\n","    primitive = load_primitive('orion.primitives.timeseries_anomalies.find_anomalies',\n","                              arguments = {'anomaly_padding':1})\n","    error_range = primitive.produce(errors=errors, index=range(len(errors)))\n","    print(\"===error_range===\\n\", error_range)\n","\n","    prediction = pd.DataFrame(0, index=range(0, len(X_test)), columns={'Fu'})\n","    for i in error_range :\n","      start = int(i[0])\n","      end = int(i[1])\n","      prediction[start:end] = 1\n","\n","    anomaly_value = get_anomaly_time(testdata, prediction['Fu'].values.tolist())\n","    drawing(anomaly_value, pd.DataFrame(testdata))\n","    recall, accuracy = calculate(pd.DataFrame(true_label), pd.DataFrame(anomaly_value))\n","    print(f'recall : {recall}, accuracy : {accuracy}')\n","    df.loc[idx] = [w, s, recall, accuracy]; idx = idx + 1\n","\n","    df.to_csv(f'./csvs_epoch10_batch8_202209201710.csv', header=True, index=False)\n","\n","\n","## epoch : 10 / batch : 8"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":433,"status":"ok","timestamp":1663554411990,"user":{"displayName":"아이덴티파이ai","userId":"09195867153538576050"},"user_tz":-540},"id":"NqEltrp-kUYY","outputId":"b7680d0e-cbee-480e-9c02-4e343556e529"},"outputs":[{"data":{"text/plain":["2039.6666666666667"]},"execution_count":31,"metadata":{},"output_type":"execute_result"}],"source":["(612600-700)/300"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2,"status":"ok","timestamp":1663553804523,"user":{"displayName":"아이덴티파이ai","userId":"09195867153538576050"},"user_tz":-540},"id":"Q1hutJjW1D2b","outputId":"ed3393e7-10ac-4797-ba43-0fbf24e0153a"},"outputs":[{"data":{"text/plain":["(50, 1)"]},"execution_count":18,"metadata":{},"output_type":"execute_result"}],"source":["np.array([1] * 50).reshape(-1, 1)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":329},"executionInfo":{"elapsed":1275,"status":"ok","timestamp":1663122878608,"user":{"displayName":"아이덴티파이ai","userId":"09195867153538576050"},"user_tz":-540},"id":"whzz9gLkz37n","outputId":"aade0078-6e10-4cf6-c021-4356d73dc1a7"},"outputs":[{"data":{"image/png":"\n","text/plain":["\u003cFigure size 2160x360 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"},{"data":{"text/plain":["(0.897196261682243, 0.9548637100464922)"]},"execution_count":110,"metadata":{},"output_type":"execute_result"},{"data":{"text/plain":["\u003cFigure size 432x288 with 0 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HZMO94f42EF7"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7_KBTaHG4j9D"},"outputs":[],"source":["### TadGAN 모델 입력\n","\n","print(\"============== TadGAN ==============\")\n","primitive = load_primitive('orion.primitives.tadgan.TadGAN',\n","                           arguments = {'X':X, \"y\":X, \n","                                        \"epochs\":15,\n","                                        \"input_shape\":(1000,1),\n","                                        \"target_shape\":(1000,1),\n","                                        \"latent_dim\" : 100,\n","                                        # \"batch_size\": 16, ########\n","                                        \"learning_rate\" : 0.01,\n","                                        \"dense_units\" : 100\n","                                        # \"layers_encoder\": [\n","                                        #     # {\n","                                        #     #   \"class\": 'keras.layers.InputLayer',\n","                                        #     #   \"parameters\" : {\n","                                        #     #       \"input_shape\" : (1000,)\n","                                        #     #   }\n","                                        #     # },\n","                                        #     {\n","                                        #       \"class\" : \"keras.layers.Bidirectional\",\n","                                        #       \"parameters\" : {\n","                                        #           \"layer\" : {\n","                                        #               \"class\" : \"keras.layers.LSTM\",\n","                                        #               \"parameters\" : {\n","                                        #                   \"units\" : 20,\n","                                        #                   \"return_sequences\":True\n","                                        #               }\n","                                        #           }\n","                                        #       }  \n","                                        #     },\n","                                        #     {\n","                                        #       \"class\" : \"keras.layers.Flatten\",\n","                                        #       \"parameters\" : {}\n","                                        #     },\n","                                        #     { \"class\": 'keras.layers.Dense',\n","                                        #       \"parameters\": {\n","                                        #           'units': 20,\n","                                        #           'activation': 'relu',\n","                                        #           # 'input_shape': [1000,],\n","                                        #       }\n","                                        #     },\n","                                        #     { \"class\" : 'keras.layers.Reshape',\n","                                        #       \"parameters\" : {\n","                                        #           \"target_shape\" : (1000,-1,1)\n","                                        #       }\n","                                        #     }\n","                                        # ],\n","                                        # \"layers_generator\" : [\n","                                        #     {\n","                                        #       \"class\" : \"keras.layers.Flatten\",\n","                                        #       \"parameters\" : {}  \n","                                        #     },\n","                                        #     {\n","                                        #       \"class\" : \"keras.layers.Dense\",\n","                                        #       \"parameters\" : {\n","                                        #           \"units\" : 1000\n","                                        #       }\n","                                        #     },\n","                                        #     {\n","                                        #       \"class\" : \"keras.layers.Reshape\",\n","                                        #       \"parameters\" : {\n","                                        #           \"target_shape\" : (1000,)\n","                                        #       }\n","                                        #     },\n","                                        #     {\n","                                        #       \"class\":\"keras.layers.Bidirectional\",\n","                                        #       \"parameters\" : {\n","                                        #           \"layer\" : {\n","                                        #               \"class\" : \"keras.layers.LSTM\",\n","                                        #               \"parameters\" : {\n","                                        #                   \"units\" : 20,\n","                                        #                   \"return_sequences\" : True,\n","                                        #                   \"dropout\" : 0.2,\n","                                        #                   \"recurrent_dropout\" : 0.2\n","                                        #               }\n","                                        #           },\n","                                        #           \"merge_mode\" : \"concat\"\n","                                        #       }\n","                                        #     }\n","                                        # ]\n","                                                        \n","                                        # \"layers_encoder\" : [tf.keras.layers.Dense(20, activation='relu', input_shape=[1000])]\n","                                        # \"layers_encoder\" : [tf.keras.Sequential(Dense(20, activation='relu'))] #\n","                                        })"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ONMZD0Mw4j7F"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"g_AoBM55tC_v"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ClOKSOsa4j45"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kP08mLBS06Jp"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CkcBbAUC06G2"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dvcPsf6V4j2U"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vHldolkTwZBz"},"outputs":[],"source":["#---# TEST #---#\n","print(f\"===========\u003c{config.threshold}\u003e===========\")\n","config.threshold = 0.05; print(f\"===========\u003c{config.threshold}\u003e===========\")\n","pred, x, _x = trainer.test(test_loader, config.threshold)\n","\n","def get_anomaly_time(original, prediction) : \n","  temp = pd.DataFrame(index=range(0, len(original)), columns={'Fu'})\n","  # temp = temp.fillna(0)\n","\n","  for i in range(len(prediction)) :\n","    if prediction[i] == 0 :\n","      for j in range(i*config.stride, (i*config.stride + config.window_size)) : \n","        temp.loc[j] = np.nan\n","\n","    elif prediction[i] == 1 : # anomaly\n","      for j in range(i*config.stride, (i*config.stride + config.window_size)) : \n","        try : temp.loc[j] = original[j]\n","        except : pass\n","\n","  # anomaly = temp.dropna()\n","  print(sum(pred))\n","  return temp\n","\n","##########################\n","#---# true list 만들기 #---#\n","##########################\n","true_label = [0 for i in range(len(x))] # test_scale\n","true_label[62200:65300] = [1 for i in range(62200,65300)]\n","true_label[95600:99300] = [1 for i in range(95600,99300)]\n","true_label[148400:152300] = [1 for i in range(148400,152300)]\n","\n","def calculate(true_list, pred_list) : ### 이따 수정 예정\n","  pred_list = pred_list.dropna()\n","  pred_anomaly_set = set(pred_list.index.tolist())\n","  pred_normal_set = set(range(len(true_list))) - pred_anomaly_set\n","  true_anomaly_set = set(np.where(np.array(true_list) == 1)[0].tolist())\n","  true_normal_set = set(np.where(np.array(true_list) == 0)[0].tolist())\n","  recall = len(pred_anomaly_set.intersection(true_anomaly_set)) / len(true_anomaly_set)\n","  # accuracy = len(anomaly_set.intersection(true_set)) / len(anomaly_set.union(true_set))\n","\n","  accuracy = (len(pred_anomaly_set.intersection(true_anomaly_set)) + len(pred_normal_set.intersection(true_normal_set))) / len(true_list) # (빨간 거 맞은거 + 파란거 맞은거) / 전체\n","  return recall, accuracy\n","\n","a = get_anomaly_time(x, pred)\n","recall, accuracy = calculate(true_label, a)\n","\n","drawing(a, x, _x) # draw plot\n","print(f\"===== RECALL ======\\n{recall}\\n====== ACCURACY =====\\n{accuracy}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"i2jd8bWocNzA"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ud1EwYw4cNvj"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jQoQOOtBhcXl"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OK3w5Cr8v5dJ"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vA2G0vWmv5Wo"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gY-C_kr7v5TQ"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XbMQF9uNv5Oz"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ubS_Nsgqv5Ke"},"outputs":[],"source":[]}],"metadata":{"colab":{"authorship_tag":"ABX9TyN3qkBcDM0PzlTonsHInT8y","collapsed_sections":[],"name":"","version":""},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}